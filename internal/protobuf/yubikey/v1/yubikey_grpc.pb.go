// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: yubikey/v1/yubikey.proto

package yubikey

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// YubikeyServiceClient is the client API for YubikeyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type YubikeyServiceClient interface {
	GetFirmwareVersion(ctx context.Context, in *GetFirmwareVersionRequest, opts ...grpc.CallOption) (*GetFirmwareVersionResponse, error)
}

type yubikeyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewYubikeyServiceClient(cc grpc.ClientConnInterface) YubikeyServiceClient {
	return &yubikeyServiceClient{cc}
}

func (c *yubikeyServiceClient) GetFirmwareVersion(ctx context.Context, in *GetFirmwareVersionRequest, opts ...grpc.CallOption) (*GetFirmwareVersionResponse, error) {
	out := new(GetFirmwareVersionResponse)
	err := c.cc.Invoke(ctx, "/yubikey.v1.YubikeyService/GetFirmwareVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// YubikeyServiceServer is the server API for YubikeyService service.
// All implementations must embed UnimplementedYubikeyServiceServer
// for forward compatibility
type YubikeyServiceServer interface {
	GetFirmwareVersion(context.Context, *GetFirmwareVersionRequest) (*GetFirmwareVersionResponse, error)
	mustEmbedUnimplementedYubikeyServiceServer()
}

// UnimplementedYubikeyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedYubikeyServiceServer struct {
}

func (UnimplementedYubikeyServiceServer) GetFirmwareVersion(context.Context, *GetFirmwareVersionRequest) (*GetFirmwareVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFirmwareVersion not implemented")
}
func (UnimplementedYubikeyServiceServer) mustEmbedUnimplementedYubikeyServiceServer() {}

// UnsafeYubikeyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to YubikeyServiceServer will
// result in compilation errors.
type UnsafeYubikeyServiceServer interface {
	mustEmbedUnimplementedYubikeyServiceServer()
}

func RegisterYubikeyServiceServer(s grpc.ServiceRegistrar, srv YubikeyServiceServer) {
	s.RegisterService(&YubikeyService_ServiceDesc, srv)
}

func _YubikeyService_GetFirmwareVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFirmwareVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YubikeyServiceServer).GetFirmwareVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yubikey.v1.YubikeyService/GetFirmwareVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YubikeyServiceServer).GetFirmwareVersion(ctx, req.(*GetFirmwareVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// YubikeyService_ServiceDesc is the grpc.ServiceDesc for YubikeyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var YubikeyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yubikey.v1.YubikeyService",
	HandlerType: (*YubikeyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFirmwareVersion",
			Handler:    _YubikeyService_GetFirmwareVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yubikey/v1/yubikey.proto",
}
